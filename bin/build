#!/bin/bash

set -eu

: "${METADATA_ONLY:=false}"
: "${PRODUCT:=srt}"
: "${STEMCELL_PATH:=}"
: "${STUB_RELEASES:=false}"

tile_dir="$( cd "$( dirname "$0" )/.." && pwd )"
build_dir="$(mktemp -d /tmp/p-runtime.XXXXXXXXX)"
docker_run_flag=""
trap '{ rm -rf "${build_dir}"; }' EXIT

output_dir="$(mktemp -d /tmp/p-runtime.XXXXXXXXX)"

if [[ (! -d "${tile_dir}/releases") && ("${STUB_RELEASES}" != "true") ]]; then
  echo "Missing required directory '${tile_dir}/releases'. Use STUB_RELEASES=true or create this directory and download all required release tarballs into it." > /dev/stderr
  exit 1
fi

if [ -z "${STEMCELL_PATH}" ]; then
  echo "Downloading latest stemcell from bosh.io (override with \$STEMCELL_PATH)..." > /dev/stderr
  STEMCELL_PATH="${build_dir}/stemcell.tgz"
  light_stemcell_url="$(curl -L --silent 'https://bosh.io/api/v1/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go_agent' | jq -r 'map(select(.light))[0].light.url')"
  wget --quiet -O "${STEMCELL_PATH}" "${light_stemcell_url}"
else
  stemcell_dir=$(dirname ${STEMCELL_PATH})
  docker_run_flag+="-v ${stemcell_dir}:${stemcell_dir}"
fi

preprocess() {
  local tile_dir dest
  tile_dir="${1}"
  dest="${2}"

  echo "Copying tile directory to ${dest}..." > /dev/stderr
  cp -Rp "${tile_dir}"/. "${dest}"

  # remove test metadata that upsets preprocessing
  rm -rf ${dest}/bin/fixtures

  docker run -it -v "${tile_dir}:${tile_dir}" -v "${dest}:${dest}" -w "${tile_dir}" pivotalcfreleng/golang go run bin/preprocess.go \
    --tile-name "${PRODUCT}" \
    --input-path "${dest}" \
    --output-path "${dest}"
}

preprocess "${tile_dir}" "${build_dir}"

pushd "${build_dir}" > /dev/null
  version="$( cat ./version )"

  optional_flags=""
  release_dir="./releases"

  if [ "${METADATA_ONLY}" == "true" ]; then
    optional_flags+="--metadata-only "
  else
    optional_flags+="--output-file "
    optional_flags+="${output_dir}/${PRODUCT}-${version}.pivotal "
  fi

  if [ "${STUB_RELEASES}" == "true" ]; then
    optional_flags+="--stub-releases "
    release_dir="./test/releases"
  fi

  echo "Baking ${PRODUCT} ${version} in the kiln..." > /dev/stderr
  docker run -it ${docker_run_flag} -v "${build_dir}:${build_dir}" -v "${output_dir}:${output_dir}" -w "${build_dir}" pivotalcfreleng/kiln kiln bake \
    --forms-directory ./forms \
    --icon icon.png \
    --instance-groups-directory ./instance_groups \
    --jobs-directory ./jobs \
    --metadata base.yml \
    --migrations-directory ./migrations/common \
    --migrations-directory "./migrations/${PRODUCT}" \
    --properties-directory ./properties \
    --releases-directory "${release_dir}" \
    --runtime-configs-directory ./runtime_configs \
    --stemcell-tarball "${STEMCELL_PATH}" \
    --variables-file "./variables/${PRODUCT}.yml" \
    --variable build-version="${version}" \
    --variable metadata-git-sha="$(git rev-parse HEAD)" \
    --version "${version}" \
    ${optional_flags}

  if [ "${METADATA_ONLY}" != "true" ]; then
    echo "" > /dev/stderr
    echo "Successfully created tile:" > /dev/stderr

    # tile path is output on stdout so other scripts can consume it, e.g.
    # om upload-product -p $(./bin/build)
    echo "${output_dir}/${PRODUCT}-${version}.pivotal"
  fi
popd > /dev/null
