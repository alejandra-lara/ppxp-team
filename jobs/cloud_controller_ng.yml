---
name: cloud_controller_ng
release: capi
provides: |
  cloud_controller: {as: cloud_controller, shared: true}
  cloud_controller_container_networking_info: {as: cloud_controller_container_networking_info, shared: true}
# go-yaml wraps lines that are longer than 80 characters,
# this breaks templating as $( ) helpers cannot have newlines in the middle.
# The key '_hack' also needs to start with underscore as keys in output are alpha-sorted and
# the variable '$v' must be declared before it is used
# Possible future fix: https://github.com/go-yaml/yaml/issues/387
_hack: '$( $v := regexReplaceAll "^\"?(\\d+)\\.(\\d+).*$" version "${1}-${2}" )'
manifest: |
  name: $( variable "label" )
  build: $( variable "build-version" )
  # $v is defined higher up
  description: https://docs.pivotal.io/pivotalcf/$($v)/pcf-release-notes/runtime-rn.html
  uaa:
    url: https://uaa.(( .cloud_controller.system_domain.value ))
    clients:
      cc-service-dashboards:
        scope: cloud_controller.write,openid,cloud_controller.read,cloud_controller_service_permissions.read
        secret: (( .uaa.cc_service_dashboards_credentials.password ))
      cc_service_key_client:
        secret: (( .uaa.cc_service_key_credentials.password ))
      cloud_controller_username_lookup:
        secret: (( .uaa.cloud_controller_username_lookup_credentials.password ))
      cc_routing:
        secret: (( .uaa.cc_routing_credentials.password ))
    ca_cert: (( $ops_manager.ca_certificate ))
  dea_next:
    staging_disk_limit_mb: 6144
  app_domains:
  - (( .cloud_controller.apps_domain.value ))
  - "mesh.(( .cloud_controller.apps_domain.value ))"
  - name: (( .properties.cf_networking_internal_domain.value ))
    internal: true
  login:
    url: https://login.(( .cloud_controller.system_domain.value ))
  domain: (( .cloud_controller.system_domain.value ))
  ccdb: (( .properties.system_database.selected_option.parsed_manifest(ccdb) ))
  copilot:
    enabled: true
    host: "copilot.service.cf.internal"
    port: 9001
    client_ca_file: (( $ops_manager.ca_certificate ))
    client_chain_file: (( .properties.copilot_client_cert.cert_pem ))
    client_key_file: (( .properties.copilot_client_cert.private_key_pem ))
    temporary_istio_domains:
    - "mesh.(( .cloud_controller.apps_domain.value ))"
  cc:
    temporary_use_logcache: true
    logcache:
      port: $( variable "log_cache_port" )
    logcache_tls:
      private_key: (( .properties.cloud_controller_logcache_tls_cert.private_key_pem ))
      certificate: (( .properties.cloud_controller_logcache_tls_cert.cert_pem ))
    temporary_disable_deployments: (( .properties.cloud_controller_temporary_disable_deployments.value ))
    default_health_check_timeout: (( .properties.cloud_controller_default_health_check_timeout.value ))
    logging_level: (( .properties.cc_logging_level.value ))
    buildpacks: '(( .properties.system_blobstore.external.iam_instance_profile_authentication.value ? .properties.system_blobstore.selected_option.parsed_manifest(ccbuildpack_iam) : .properties.system_blobstore.selected_option.parsed_manifest(ccbuildpack) ))'
    droplets: '(( .properties.system_blobstore.external.iam_instance_profile_authentication.value ? .properties.system_blobstore.selected_option.parsed_manifest(ccdroplet_iam) : .properties.system_blobstore.selected_option.parsed_manifest(ccdroplet) ))'
    packages:  '(( .properties.system_blobstore.external.iam_instance_profile_authentication.value ? .properties.system_blobstore.selected_option.parsed_manifest(ccpackage_iam) : .properties.system_blobstore.selected_option.parsed_manifest(ccpackage) ))'
    resource_pool:  '(( .properties.system_blobstore.external.iam_instance_profile_authentication.value ? .properties.system_blobstore.selected_option.parsed_manifest(ccresource_iam) : .properties.system_blobstore.selected_option.parsed_manifest(ccresource) ))'
    rate_limiter: (( .properties.cc_api_rate_limit.selected_option.parsed_manifest(rate_limiter) ))
    disable_custom_buildpacks: "(( .cloud_controller.enable_custom_buildpacks.value ? 'false' : 'true' ))"
    mutual_tls:
      private_key: (( .properties.cloud_controller_mutual_cert.private_key_pem ))
      ca_cert: (( $ops_manager.ca_certificate ))
      public_cert: (( .properties.cloud_controller_mutual_cert.cert_pem ))
    public_tls:
      private_key: (( .properties.cloud_controller_public_tls_cert.private_key_pem ))
      ca_cert: (( $ops_manager.ca_certificate ))
      certificate: (( .properties.cloud_controller_public_tls_cert.cert_pem ))
    stacks:
    - name: cflinuxfs3
      description: Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS
    - name: windows2012R2
      description: Microsoft Windows / .Net 64 bit
    - name: windows2016
      description: Microsoft Windows 2016
    - name: windows
      description: Windows Server
    default_stack: cflinuxfs3
    min_cli_version: 6.23.0
    bulk_api_password: ((( cloud-controller-bulk-api-credentials.password )))
    default_running_security_groups:
    - default_security_group
    allow_app_ssh_access: (( .cloud_controller.allow_app_ssh_access.value ))
    default_app_disk_in_mb: (( .cloud_controller.default_disk_quota_app.value ))
    app_bits_max_body_size: "(( .cloud_controller.max_file_size.value ))M"
    db_encryption_key: (( .cloud_controller.encrypt_key.value || .cloud_controller.db_encryption_credentials.password ))
    maximum_health_check_timeout: 600
    security_group_definitions:
    - name: default_security_group
      rules:
      - protocol: all
        destination: 0.0.0.0-169.253.255.255
      - protocol: all
        destination: 169.255.0.0-255.255.255.255
    default_app_ssh_access: (( .cloud_controller.default_app_ssh_access.value ))
    min_recommended_cli_version: 6.23.0
    security_event_logging:
      enabled: (( .cloud_controller.security_event_logging_enabled.value ))
    install_buildpacks:
    - name: staticfile_buildpack
      package: staticfile-buildpack-cflinuxfs3
    - name: java_buildpack_offline
      package: java-buildpack-cflinuxfs3
    - name: ruby_buildpack
      package: ruby-buildpack-cflinuxfs3
    - name: nodejs_buildpack
      package: nodejs-buildpack-cflinuxfs3
    - name: go_buildpack
      package: go-buildpack-cflinuxfs3
    - name: r_buildpack
      package: r-buildpack-cflinuxfs3
    - name: python_buildpack
      package: python-buildpack-cflinuxfs3
    - name: php_buildpack
      package: php-buildpack-cflinuxfs3
    - name: dotnet_core_buildpack
      package: dotnet-core-buildpack-cflinuxfs3
    - name: binary_buildpack
      package: binary-buildpack-cflinuxfs3
    - name: binary_buildpack
      package: binary-buildpack-windows2012R2
    - name: binary_buildpack
      package: binary-buildpack-windows2016
    - name: binary_buildpack
      package: binary-buildpack-windows
    broker_client_default_async_poll_interval_seconds: 10
    diego:
      docker_staging_stack: cflinuxfs3
      file_server_url: http://file-server.service.cf.internal:$( variable "diego_fileserver_port" )
      insecure_docker_registry_list: (( .diego_cell.insecure_docker_registry_list.parsed_strings ))
      pid_limit: 0
      temporary_cc_uploader_mtls: true
      temporary_droplet_download_mtls: true
      temporary_local_apps: true
      temporary_local_staging: true
      temporary_local_sync: true
      temporary_local_tasks: true
      temporary_local_tps: true
    allowed_cors_domains:
    - https://apm.(( .cloud_controller.system_domain.value ))
    - https://metrics.(( .cloud_controller.system_domain.value ))
    maximum_app_disk_in_mb: (( .cloud_controller.max_disk_quota_app.value ))
    default_app_memory: (( .cloud_controller.default_app_memory.value ))
    internal_api_user: ((( cloud-controller-internal-api-user-credentials.username )))
    internal_api_password: ((( cloud-controller-internal-api-user-credentials.password )))
    staging_upload_user: ((( cloud-controller-staging-upload-credentials.username )))
    staging_upload_password: ((( cloud-controller-staging-upload-credentials.password )))
    volume_services_enabled: true
    default_staging_security_groups:
    - default_security_group
    quota_definitions:
      default:
        memory_limit: (( .cloud_controller.default_quota_memory_limit_mb.value ))
        total_services: (( .cloud_controller.default_quota_max_number_services.value ))
        non_basic_services_allowed: true
        total_routes: 1000
        trial_db_allowed: true
      runaway:
        memory_limit: 102400
        total_services: -1
        total_routes: 1000
        non_basic_services_allowed: true
    server_keepalive_timeout: 0
    staging_timeout_in_seconds: (( .cloud_controller.staging_timeout_in_seconds.value ))
  credhub_api:
    ca_cert: (( $ops_manager.ca_certificate ))
  support_address: https://support.pivotal.io
  routing_api:
    enabled: true
  hm9000:
    port: 12345
  ssl:
    skip_cert_verify: (( .ha_proxy.skip_cert_verify.value ))
  doppler:
    port: (( .properties.logger_endpoint_port.value ))
  router:
    route_services_secret: (( .properties.route_services.selected_option.parsed_manifest(secret) ))
  app_ssh:
    host_key_fingerprint: (( .diego_brain.ssh_host_key.public_key_fingerprint ))
  release_level_backup: true
  system_domain: (( .cloud_controller.system_domain.value ))
  system_domain_organization: system
