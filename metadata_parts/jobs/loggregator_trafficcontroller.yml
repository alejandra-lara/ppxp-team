---
name: loggregator_trafficcontroller
label: Loggregator Trafficcontroller
resource_label: Loggregator Trafficcontroller
description: Loggregator trafficcontroller distributes requests to Loggregator servers
templates:
- name: consul_agent
  release: consul
  consumes: |
    consul_common: {from: consul_common_link}
    consul_client: {from: consul_client_link}
    consul_server: nil
- name: loggregator_trafficcontroller
  release: loggregator
- name: metron_agent
  release: loggregator
- name: route_registrar
  release: routing
- name: syslog_forwarder
  release: syslog-migration
- name: reverse_log_proxy
  release: loggregator

resource_definitions:
- name: ram
  type: integer
  label: RAM
  configurable: true
  default: 1_024
  constraints:
    min: 1_024

- name: ephemeral_disk
  type: integer
  label: Ephemeral Disk
  configurable: true
  default: 2_048
  constraints:
    min: 2_048

- name: persistent_disk
  type: integer
  label: Persistent Disk
  configurable: false
  default: 0

- name: cpu
  type: integer
  label: CPU
  configurable: true
  default: 1
  constraints:
    min: 1

static_ip: 0
dynamic_ip: 1
max_in_flight: 1
single_az_only: false

instance_definition:
  name: instances
  type: integer
  label: Instances
  default: 3
  configurable: true
  constraints:
    min: 1

property_blueprints:
  - name: status_credentials
    type: simple_credentials

  - name: trafficcontroller_tls_cert
    type: rsa_cert_credentials
    configurable: false
    default:
      domains: ["trafficcontroller"]

  - name: statsdinjector_tls_cert
    type: rsa_cert_credentials
    configurable: false
    default:
      domains: ["statsdinjector"]

manifest: |
  syslog: (( .properties.system_logging.selected_option.parsed_manifest(syslog) ))
  cc:
    srv_api_uri: "https://api.(( .cloud_controller.system_domain.value ))"
  system_domain: (( .cloud_controller.system_domain.value ))
  ssl:
    skip_cert_verify: (( .ha_proxy.skip_cert_verify.value ))
  metron_endpoint:
    shared_secret: (( .doppler.shared_secret_credentials.password ))
  metron_agent:
    deployment: cf
  loggregator:
    tls:
      ca_cert: (( $ops_manager.ca_certificate ))
      trafficcontroller:
        cert: (( trafficcontroller_tls_cert.cert_pem ))
        key: (( trafficcontroller_tls_cert.private_key_pem ))
      metron:
        cert: (( .doppler.metron_tls_cert.cert_pem ))
        key: (( .doppler.metron_tls_cert.private_key_pem ))
      reverse_log_proxy:
        cert: (( .syslog_adapter.adapter_rlp_tls.cert_pem ))
        key: (( .syslog_adapter.adapter_rlp_tls.private_key_pem ))
    uaa:
      client: (( .uaa.doppler_client_credentials.identity ))
      client_secret: (( .uaa.doppler_client_credentials.password ))
  uaa:
    clients:
      doppler:
        secret: (( .uaa.doppler_client_credentials.password ))
  router:
    cipher_suites: (( .properties.networking_point_of_entry.external_ssl.ssl_ciphers.value ))
  route_registrar:
    routes:
    - name: doppler
      port: 8081
      registration_interval: 20s
      uris:
      - "doppler.(( .cloud_controller.system_domain.value ))"
    - name: loggregator
      port: 8080
      registration_interval: 20s
      uris:
      - "loggregator.(( .cloud_controller.system_domain.value ))"
  consul:
    agent:
      services:
        loggregator_trafficcontroller: {}
        reverse_log_proxy: {}
