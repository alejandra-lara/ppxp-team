---
name: diego_database
label: Diego BBS
resource_label: Diego BBS
description: An datastore node for Diego
templates:
  - name: consul_agent
    release: consul
    consumes: |
      consul: nil
      consul_common: {from: consul_common_link}
      consul_client: {from: consul_client_link}
      consul_server: nil
  - name: bbs
    release: diego
  - name: cfdot
    release: diego
  - name: metron_agent
    release: loggregator
  - name: locket
    release: diego
  - name: silk-controller
    release: cf-networking
    consumes: |
      (( .properties.system_database.selected_option.parsed_manifest(mysql_db_link) ))

resource_definitions:
  - name: ram
    type: integer
    label: RAM
    configurable: true
    default: 1_024
    constraints:
      min: 1_024

  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 2_048
    constraints:
      min: 1_024

  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: false
    default: 0

  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 1
    constraints:
      min: 1
      power_of_two: true

static_ip: 0
dynamic_ip: 1
serial: true
max_in_flight: 1
single_az_only: false

instance_definition:
  name: instances
  type: integer
  label: Instances
  configurable: true
  default: 3
  constraints:
    min: 1

property_blueprints:
  - name: bbs_encryption_passphrase
    type: secret
    configurable: false

  - name: locket_tls_cert
    type: rsa_cert_credentials
    configurable: false
    default:
      domains: ["locket.service.cf.internal"]

  - name: skip_consul_locks
    type: boolean
    configurable: true
    default: true

  - name: silk_controller_server_cert
    type: rsa_cert_credentials
    configurable: false
    default:
      domains: ["silk-controller.service.cf.internal"]

  - name: silk_daemon_client_cert
    type: rsa_cert_credentials
    configurable: false

manifest: |
  diego:
    bbs:
      ca_cert: (( $ops_manager.ca_certificate ))
      server_cert: (( .properties.bbs_server_cert.cert_pem ))
      server_key: (( .properties.bbs_server_cert.private_key_pem ))
      active_key_label: key1
      encryption_keys:
        - label: key1
          passphrase: (( bbs_encryption_passphrase.value ))
      auctioneer:
        require_tls: true
        api_location: "auctioneer.service.cf.internal:9016"
        ca_cert: (( $ops_manager.ca_certificate ))
        client_cert: (( .properties.auctioneer_client_cert.cert_pem ))
        client_key: (( .properties.auctioneer_client_cert.private_key_pem ))
      sql: (( .properties.system_database.selected_option.parsed_manifest(diegodb) ))
      rep:
        require_tls: true
        ca_cert: (( $ops_manager.ca_certificate ))
        client_cert: (( .properties.rep_client_cert.cert_pem ))
        client_key: (( .properties.rep_client_cert.private_key_pem ))
      etcd:
        machines: []
        ca_cert: ""
        client_cert: ""
        client_key: ""
      locket:
        api_location: "locket.service.cf.internal:8891"
      skip_consul_lock: (( skip_consul_locks.value ))
    cfdot:
      bbs:
        ca_cert: (( $ops_manager.ca_certificate ))
        client_cert: (( .properties.bbs_client_cert.cert_pem ))
        client_key: (( .properties.bbs_client_cert.private_key_pem ))
    locket:
      sql: (( .properties.system_database.selected_option.parsed_manifest(locketdb) ))
  consul:
    agent:
      services:
        silk-controller: {}
  syslog_daemon_config:
    address: (( .properties.syslog_host.value ))
    port: (( .properties.syslog_port.value ))
    transport: (( .properties.syslog_protocol.value ))
  metron_agent:
    deployment: cf
  metron_endpoint:
    shared_secret: (( .doppler.shared_secret_credentials.password ))
  loggregator:
    tls:
      ca_cert: (( $ops_manager.ca_certificate ))
      metron:
        cert: (( .doppler.metron_tls_cert.cert_pem ))
        key: (( .doppler.metron_tls_cert.private_key_pem ))
  tls:
    ca_cert: (( $ops_manager.ca_certificate ))
    cert: (( locket_tls_cert.cert_pem ))
    key: (( locket_tls_cert.private_key_pem ))
  cf_networking:
    disable: (( .properties.container_networking.selected_option.parsed_manifest(cf_networking_disabled) ))
    network: (( .properties.container_networking.enable.network_cidr.value ))
    silk_controller:
      ca_cert: (( $ops_manager.ca_certificate ))
      server_cert: (( silk_controller_server_cert.cert_pem ))
      server_key: (( silk_controller_server_cert.private_key_pem ))
      database: (( .properties.system_database.selected_option.parsed_manifest(silkdb) ))
    silk_daemon:
      ca_cert: (( $ops_manager.ca_certificate ))
      client_cert: (( silk_daemon_client_cert.cert_pem ))
      client_key: (( silk_daemon_client_cert.private_key_pem ))
