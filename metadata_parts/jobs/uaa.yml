---
name: uaa
label: UAA
resource_label: UAA
description: Pivotal CF Elastic Runtime's Authentication and Authorization server
templates:
  - name: consul_agent
    release: consul
    consumes: |
      consul_common: {from: consul_common_link}
      consul_client: {from: consul_client_link}
      consul_server: nil
  - name: uaa
    release: uaa
    consumes: |
      (( .properties.uaa_database.selected_option.parsed_manifest(db_link) ))
  - name: metron_agent
    release: loggregator
  - name: route_registrar
    release: routing
  - name: statsd_injector
    release: statsd-injector
  - name: syslog_forwarder
    release: syslog-migration

resource_definitions:
  - name: ram
    type: integer
    label: RAM
    configurable: true
    default: 4_096
    constraints:
      min: 1_024

  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 32_768
    constraints:
      min: 2_048

  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: false
    default: 0

  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1

static_ip: 0
dynamic_ip: 1
max_in_flight: 1
single_az_only: false
serial: true

instance_definition:
  name: instances
  type: integer
  label: Instances
  default: 2
  configurable: true
  constraints:
    min: 1

property_blueprints:
  - name: admin_credentials
    type: simple_credentials
    default:
      identity: admin

  - name: push_apps_manager_credentials
    type: simple_credentials
    default:
      identity: push_apps_manager

  - name: run_smoke_tests_credentials
    type: simple_credentials
    default:
      identity: smoke_tests

  - name: system_services_credentials
    type: simple_credentials
    default:
      identity: system_services

  - name: system_verification_credentials
    type: simple_credentials
    default:
      identity: system_verification

  - name: system_passwords_client_credentials
    type: simple_credentials
    default:
      identity: system_passwords

  - name: login_client_credentials
    type: simple_credentials
    default:
      identity: login

  - name: identity_client_credentials
    type: simple_credentials
    label: Identity client credentials
    default:
      identity: identity

  - name: gorouter_client_credentials
    type: simple_credentials
    default:
      identity: gorouter

  - name: doppler_client_credentials
    type: simple_credentials
    default:
      identity: doppler

  - name: opentsdb_nozzle_credentials
    type: simple_credentials
    default:
      identity: opentsdb-firehose-nozzle

  - name: apps_manager_client_credentials
    type: simple_credentials
    default:
      identity: portal

  - name: usage_service_client_credentials
    type: simple_credentials
    default:
      identity: usage_service

  - name: invitations_client_credentials
    type: simple_credentials
    default:
      identity: invitations

  - name: autoscale_client_credentials
    type: simple_credentials
    default:
      identity: autoscaling_service

  - name: cc_service_dashboards_credentials
    type: simple_credentials
    default:
      identity: cc-service-dashboards

  - name: cc_client_credentials
    type: simple_credentials
    default:
      identity: cloud_controller

  - name: admin_client_credentials
    type: simple_credentials
    default:
      identity: admin

  - name: jwt_signing_key_credentials
    type: rsa_pkey_credentials

  - name: notifications_client_credentials
    type: simple_credentials
    default:
      identity: notifications

  - name: notifications_template_client_credentials
    type: simple_credentials
    default:
      identity: notifications_template

  - name: ssh_proxy_client_credentials
    type: simple_credentials
    default:
      identity: ssh_proxy

  - name: notifications_ui_client_credentials
    type: simple_credentials
    default:
      identity: notifications_ui_client

  - name: cloud_controller_username_lookup_credentials
    type: simple_credentials
    default:
      identity: cloud_controller_username_lookup

  - name: cc_routing_credentials
    type: simple_credentials
    default:
      identity: cc_routing

  - name: apps_metrics_credentials
    type: simple_credentials
    default:
      identity: apps_metrics

  - name: apps_metrics_processing_credentials
    type: simple_credentials
    default:
      identity: apps_metrics_processing

  - name: tcp_router_credentials
    type: simple_credentials
    default:
      identity: tcp_router

  - name: tcp_emitter_credentials
    type: simple_credentials
    default:
      identity: tcp_emitter

  - name: loggregator_credentials
    type: simple_credentials
    default:
      identity: loggregator

  - name: service_provider_key_credentials
    type: rsa_cert_credentials
    configurable: true

  - name: service_provider_key_password
    type: secret
    configurable: true
    optional: true

  - name: apps_manager_access_token_lifetime
    type: integer
    configurable: true
    default: 1209600

  - name: apps_manager_refresh_token_lifetime
    type: integer
    configurable: true
    default: 1209600

  - name: cf_cli_access_token_lifetime
    type: integer
    configurable: true
    default: 7200

  - name: cf_cli_refresh_token_lifetime
    type: integer
    configurable: true
    default: 1209600

  - name: ssl_credentials
    type: rsa_cert_credentials
    default:
      domains:
      - uaa.service.cf.internal

  - name: pivotal_account_client_credentials
    type: simple_credentials
    default:
      identity: pivotal_account

  - name: concourse_atc_client_credentials
    type: simple_credentials
    default:
      identity: concourse_atc

  - name: logsearch_firehose_credentials
    type: simple_credentials
    default:
      identity: logsearch-firehose

  - name: splunk_firehose_credentials
    type: simple_credentials
    default:
      identity: splunk-firehose

  - name: solace_router_client_credentials
    type: simple_credentials
    default:
      identity: solace_router

  - name: greenplum_broker_client_credentials
    type: simple_credentials
    default:
      identity: greenplum_broker

  - name: greenplum_router_admin_client_credentials
    type: simple_credentials
    default:
      identity: greenplum_router_admin

  - name: greenplum_router_client_credentials
    type: simple_credentials
    default:
      identity: greenplum_router

  - name: cloudcache_broker_client_credentials
    type: simple_credentials
    default:
      identity: cloudcache_broker

  - name: dedicated_mysql_notifications_client_credentials
    type: simple_credentials
    default:
      identity: dedicated-mysql-notifications

  - name: customize_username_label
    type: string
    configurable: true
    default: "Email"

  - name: customize_password_label
    type: string
    configurable: true
    default: "Password"

  - name: push_notifications_dashboard_client
    type: simple_credentials
    default:
      identity: push-notifications-dashboard

  - name: push_api_client
    type: simple_credentials
    default:
      identity: push-api-client

  - name: network_policy_server_client
    type: simple_credentials
    default:
      identity: network-policy-server

  - name: proxy_ips_regex
    type: string
    configurable: true
    default: "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}"

  - name: issuer_uri
    type: string
    configurable: true
    optional: true

manifest: |
  syslog: (( .properties.system_logging.selected_option.parsed_manifest(syslog) ))
  consul:
    agent:
      services:
        uaa: {}
  login:
    home_redirect: "https://account.(( .cloud_controller.system_domain.value ))/identity/apps"
    self_service_links_enabled: (( .properties.uaa.selected_option.parsed_manifest(self_service_links_enabled) ))
    branding:
      company_name: (( .push-apps-manager.company_name.value || "Pivotal" ))
      product_logo: (( .push-apps-manager.logo.value || "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" ))
      square_logo: (( .push-apps-manager.square_logo.value || "iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAYAAACPZlfNAAAAAXNSR0IArs4c6QAABYtJREFUeAHtnVtsFFUYx7/d3ruWotUKVIkNaCw02YgJGBRTMd4CokUejD4QH4gxQcIDeHnBmPjkhSghUYLGe3ywPtAHNCo0QgkWwi2tXG2V1kIpLXTbLt1tS9dzlmzSJssZhv32zDk7/2km2znn7Pd9+/vt2Z2dmW0D9Obat4gCiwiLBQQSLflSViAQeN6Can1fYiJBFPQ9BcsAQBiEWUbAsnIxwyDMMgKWlYsZBmGWEbCsXMwwCLOMgGXlYoZBmGUELCsXMwzCLCNgWbmYYRBmGQHLysUMgzDLCFhWLmYYhFlGwLJyMcMgzDIClpWLGQZhlhGwrFzMMAizjIBl5WKGQZhlBCwrV1xbb96y59V1VFJQmLawQNrWa43x8XEaHo1fW+Oj1H8lSqf6eulEbw+dvNhLvcNDinvb0WWksAdm3UWhwiJ2gt2RAWo80UY7jrdSU8cZGrt6lT1HtgMaKSxbD7qqfDq99tAjyTUSG6FP9v1BH+3dTUPxeLZSssf17U5HeXEJbXr8aerY+A6tf7iOxFeu2OFmI6BvhaVgVoRCtHl5PTW8/AoV5xekmo299b2wlJn6+WFqWrOWKkpDqSYjbyFskpZFs++hL1e9NKnFvF+t3OmQOwzdkcgUmnnBABXm5Ys1j8qKisVadFPvS8tramn1goX09eEDU+KbsmGlsMbjbbT6x++UDOVORGXoFppXOYMerLqbVsyrpcWzqykYdH5R+fjZlcnd/8sjV5Q5vOh0rt6LqhhyJsQ3uC+ID8ry89aHYtf90W1bKLzlffr19EnH6HIP8oXasOM4LwbkrLB0MP+6cJ6e+eoz+vTP5nTdU9peDC+Ysm3Khq+ESehy5r3e2ECHu7uUDuqq59Id4iXVtMV3wqSACSHt3V2/KF3I97qayjuVY7zo9KUwCfq3M6coNjamZD6zrFzZ70Wnb4XFxseoK3JZyXzWtGnKfi86fStMwu6LRpXMZ5RBmBKQ7k75XqZa8gLmPZ/Nq0hFkLnvttJSZUT5Oc60xbfC5CGs6lsrlD56hgaV/V50+lbYkuo5VFygPp3SMwxhXjwp0+bcsGRp2vZU48TEBB09153aNObWlzNMHo1/6r4apYTmsx10MTqsHONFp5VH6zMBtWbhYtq6YpVjiJ/ajjmO8WKAL4QFxamWZffPT1678dicex05D4jTKj8cO+Q4zosBOSXs7bonktci5ovjgPIUye3ieo3wzKrk+TC5faPLGz83On6ovtFY3ONySth7Ty67qbPMk6Hu+edv+vzg/slNRv3uy52O6xk40HWW6r/94nrdRrTn1AzLhOju9tP03DfbKTo6mkmYrN/X98L6xQHgTb/vpG0t+5LnybJOPMMEvhXWOXCJvj9yiD7Yu4sGRkYyxKjv7r4RJi+Na+05Rwf/66SG1qO0v/NffZQZM+WUsI07d1BC/MTE144GYzHxJYcYDYq1vb/f8WQlI9OshsopYZubm7IKy4Tg2K03wYKLGiDMBSwThkKYCRZc1ABhLmCZMBTCTLDgogYIcwHLhKEQZoIFFzVAmAtYJgyFMBMsuKgBwlzAMmEohJlgwUUNEOYClglDIcwECy5qgDAXsEwYCmEmWHBRA4S5gGXCUAgzwYKLGow84yyvuyhR/GW19kt9Lh5ibg01UtjS7VtzizLjo8FLIiNMHaEgTAdlxhwQxghTRygI00GZMQeEMcLUEQrCdFBmzAFhjDB1hIIwHZQZc0AYI0wdoSBMB2XGHBDGCFNHKAjTQZkxB4QxwtQRCsJ0UGbMAWGMMHWEgjAdlBlzQBgjTB2hIEwHZcYcEMYIU0coCNNBmTEHhDHC1BEKwnRQZswBYYwwdYSCMB2UGXNAGCNMHaEgTAdlxhziUu1Ei8M/+WFMh1CZEUi0/A+j7hNSB5Wo2wAAAABJRU5ErkJggg==" ))
      footer_legal_text: (( .push-apps-manager.footer_text.value ))
    prompt:
      username:
        text: (( .uaa.customize_username_label.value ))
      password:
        text: (( .uaa.customize_password_label.value ))
    links:
      home: "https://apps.(( .cloud_controller.system_domain.value ))"
      passwd: "https://account.(( .cloud_controller.system_domain.value ))/forgot-password"
      signup: "https://account.(( .cloud_controller.system_domain.value ))/sign-up"
    notifications:
      url: "https://notifications.(( .cloud_controller.system_domain.value ))"
    saml:
      entityid: "http://login.(( .cloud_controller.system_domain.value ))"
      activeKeyId: key1
      serviceProviderKey: ""
      serviceProviderKeyPassword: ""
      serviceProviderCertificate: ""
      keys:
        key1:
          key: (( service_provider_key_credentials.private_key_pem ))
          passphrase: (( "service_provider_key_password.value" ))
          certificate: (( service_provider_key_credentials.cert_pem ))
      providers: (( .properties.uaa.selected_option.parsed_manifest(saml_provider) ))
      signRequest: (( .properties.uaa.saml.sign_auth_requests.value ))
      wantAssertionSigned: (( .properties.uaa.saml.require_signed_assertions.value ))
      signatureAlgorithm: (( .properties.uaa.saml.signature_algorithm.value ))
    logout:
      redirect:
        parameter:
          disable: false
          whitelist:
          - https://console.(( .cloud_controller.system_domain.value ))/
          - https://apps.(( .cloud_controller.system_domain.value ))/
  uaa:
    proxy_ips_regex: (( .uaa.proxy_ips_regex.value ))
    sslCertificate: (( ssl_credentials.cert_pem ))
    sslPrivateKey: (( ssl_credentials.private_key_pem ))
    catalina_opts: "-Xmx768m -XX:MaxPermSize=256m"
    url: "https://uaa.(( .cloud_controller.system_domain.value ))"
    issuer: (( issuer_uri.value ))
    zones:
      internal:
        hostnames:
        - uaa.service.cf.internal
    authentication:
      policy:
        lockoutAfterFailures: (( .properties.uaa.internal.password_max_retry.value ))
    password:
      policy:
        minLength: (( .properties.uaa.internal.password_min_length.value ))
        requireUpperCaseCharacter: (( .properties.uaa.internal.password_min_uppercase.value ))
        requireLowerCaseCharacter: (( .properties.uaa.internal.password_min_lowercase.value ))
        requireDigit: (( .properties.uaa.internal.password_min_numeric.value ))
        requireSpecialCharacter: (( .properties.uaa.internal.password_min_special.value ))
        expirePasswordInMonths: (( .properties.uaa.internal.password_expires_after_months.value ))
    ldap:
      url: (( .properties.uaa.ldap.url.value ))
      userDN: (( .properties.uaa.ldap.credentials.identity ))
      userPassword: (( .properties.uaa.ldap.credentials.password ))
      searchBase: (( .properties.uaa.ldap.search_base.value ))
      searchFilter: (( .properties.uaa.ldap.search_filter.value ))
      sslCertificate: (( .properties.uaa.ldap.server_ssl_cert.value ))
      sslCertificateAlias: (( .properties.uaa.ldap.server_ssl_cert_alias.value ))
      mailAttributeName: (( .properties.uaa.ldap.mail_attribute_name.value ))
      enabled: (( .properties.uaa.ldap.url.value_present? ))
      emailDomain: (( .properties.uaa.ldap.email_domains.parsed_strings ))
      referral: (( .properties.uaa.ldap.ldap_referrals.value ))
      groups:
        profile_type: "(( .properties.uaa.ldap.group_search_base.value_present? ? 'groups-map-to-scopes' : 'no-groups' ))"
        searchBase: (( .properties.uaa.ldap.group_search_base.value ))
        groupSearchFilter: (( .properties.uaa.ldap.group_search_filter.value ))
    jwt:
      policy:
        active_key_id: key-1
        keys:
          key-1:
            signingKey: (( jwt_signing_key_credentials.private_key_pem ))
    admin:
      client_secret: (( admin_client_credentials.password ))
    proxy:
      servers: (( .router.ips ))
    user:
      authorities:
      - openid
      - scim.me
      - cloud_controller.read
      - cloud_controller.write
      - cloud_controller_service_permissions.read
      - password.write
      - uaa.user
      - approvals.me
      - oauth.approvals
      - notification_preferences.read
      - notification_preferences.write
      - profile
      - roles
      - user_attributes
      - uaa.offline_token
      - actuator.read
      - cloud_controller.user
    clients:
      opentsdb-firehose-nozzle:
        access-token-validity: 1209600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: (( opentsdb_nozzle_credentials.password ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))"
      identity:
        id: (( identity_client_credentials.identity ))
        secret: (( identity_client_credentials.password ))
        scope: "cloud_controller.admin,cloud_controller.read,cloud_controller.write,openid,zones.*.*,zones.*.*.*,zones.read,zones.write,scim.read"
        resource_ids: none
        override: true
        authorized-grant-types: "authorization_code,client_credentials,refresh_token"
        autoapprove: true
        authorities: "scim.zones,zones.read,uaa.resource,zones.write,cloud_controller.admin,uaa.admin"
        redirect-uri: "https://p-identity.(( .cloud_controller.system_domain.value ))/dashboard/,https://p-identity.(( .cloud_controller.system_domain.value ))/dashboard/**"
      login:
        id: (( login_client_credentials.identity ))
        secret: (( login_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write"
        authorized-grant-types: "client_credentials,refresh_token"
        scope: "openid,oauth.approvals"
      (( apps_manager_client_credentials.identity )):
        id: (( apps_manager_client_credentials.identity ))
        secret: (( apps_manager_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "scim.write,scim.read,cloud_controller.read,cloud_controller.write,password.write,uaa.admin,uaa.resource,cloud_controller.admin,emails.write,notifications.write"
        authorized-grant-types: "authorization_code,client_credentials,password,implicit"
        scope: "openid,cloud_controller.read,cloud_controller.write,password.write,console.admin,console.support,cloud_controller.admin"
        access-token-validity: (( apps_manager_access_token_lifetime.value ))
        refresh-token-validity: (( apps_manager_refresh_token_lifetime.value ))
        name: Pivotal Apps Manager
        app-launch-url: "https://apps.(( .cloud_controller.system_domain.value ))"
        show-on-homepage: false
        app-icon: iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAYAAACPZlfNAAAAAXNSR0IArs4c6QAABYtJREFUeAHtnVtsFFUYx7/d3ruWotUKVIkNaCw02YgJGBRTMd4CokUejD4QH4gxQcIDeHnBmPjkhSghUYLGe3ywPtAHNCo0QgkWwi2tXG2V1kIpLXTbLt1tS9dzlmzSJssZhv32zDk7/2km2znn7Pd9+/vt2Z2dmW0D9Obat4gCiwiLBQQSLflSViAQeN6Can1fYiJBFPQ9BcsAQBiEWUbAsnIxwyDMMgKWlYsZBmGWEbCsXMwwCLOMgGXlYoZBmGUELCsXMwzCLCNgWbmYYRBmGQHLysUMgzDLCFhWLmYYhFlGwLJyMcMgzDIClpWLGQZhlhGwrFzMMAizjIBl5WKGQZhlBCwrV1xbb96y59V1VFJQmLawQNrWa43x8XEaHo1fW+Oj1H8lSqf6eulEbw+dvNhLvcNDinvb0WWksAdm3UWhwiJ2gt2RAWo80UY7jrdSU8cZGrt6lT1HtgMaKSxbD7qqfDq99tAjyTUSG6FP9v1BH+3dTUPxeLZSssf17U5HeXEJbXr8aerY+A6tf7iOxFeu2OFmI6BvhaVgVoRCtHl5PTW8/AoV5xekmo299b2wlJn6+WFqWrOWKkpDqSYjbyFskpZFs++hL1e9NKnFvF+t3OmQOwzdkcgUmnnBABXm5Ys1j8qKisVadFPvS8tramn1goX09eEDU+KbsmGlsMbjbbT6x++UDOVORGXoFppXOYMerLqbVsyrpcWzqykYdH5R+fjZlcnd/8sjV5Q5vOh0rt6LqhhyJsQ3uC+ID8ry89aHYtf90W1bKLzlffr19EnH6HIP8oXasOM4LwbkrLB0MP+6cJ6e+eoz+vTP5nTdU9peDC+Ysm3Khq+ESehy5r3e2ECHu7uUDuqq59Id4iXVtMV3wqSACSHt3V2/KF3I97qayjuVY7zo9KUwCfq3M6coNjamZD6zrFzZ70Wnb4XFxseoK3JZyXzWtGnKfi86fStMwu6LRpXMZ5RBmBKQ7k75XqZa8gLmPZ/Nq0hFkLnvttJSZUT5Oc60xbfC5CGs6lsrlD56hgaV/V50+lbYkuo5VFygPp3SMwxhXjwp0+bcsGRp2vZU48TEBB09153aNObWlzNMHo1/6r4apYTmsx10MTqsHONFp5VH6zMBtWbhYtq6YpVjiJ/ajjmO8WKAL4QFxamWZffPT1678dicex05D4jTKj8cO+Q4zosBOSXs7bonktci5ovjgPIUye3ieo3wzKrk+TC5faPLGz83On6ovtFY3ONySth7Ty67qbPMk6Hu+edv+vzg/slNRv3uy52O6xk40HWW6r/94nrdRrTn1AzLhOju9tP03DfbKTo6mkmYrN/X98L6xQHgTb/vpG0t+5LnybJOPMMEvhXWOXCJvj9yiD7Yu4sGRkYyxKjv7r4RJi+Na+05Rwf/66SG1qO0v/NffZQZM+WUsI07d1BC/MTE144GYzHxJYcYDYq1vb/f8WQlI9OshsopYZubm7IKy4Tg2K03wYKLGiDMBSwThkKYCRZc1ABhLmCZMBTCTLDgogYIcwHLhKEQZoIFFzVAmAtYJgyFMBMsuKgBwlzAMmEohJlgwUUNEOYClglDIcwECy5qgDAXsEwYCmEmWHBRA4S5gGXCUAgzwYKLGow84yyvuyhR/GW19kt9Lh5ibg01UtjS7VtzizLjo8FLIiNMHaEgTAdlxhwQxghTRygI00GZMQeEMcLUEQrCdFBmzAFhjDB1hIIwHZQZc0AYI0wdoSBMB2XGHBDGCFNHKAjTQZkxB4QxwtQRCsJ0UGbMAWGMMHWEgjAdlBlzQBgjTB2hIEwHZcYcEMYIU0coCNNBmTEHhDHC1BEKwnRQZswBYYwwdYSCMB2UGXNAGCNMHaEgTAdlxhziUu1Ei8M/+WFMh1CZEUi0/A+j7hNSB5Wo2wAAAABJRU5ErkJggg==
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value )),https://apps.(( .cloud_controller.system_domain.value ))/*"
      apps_manager_js:
        name: "PCF Apps Manager"
        override: true
        autoapprove:
          - cloud_controller.read
          - cloud_controller.write
          - cloud_controller.admin
          - cloud_controller.user
          - cloud_controller.admin_read_only
          - cloud_controller.global_auditor
          - actuator.read
          - openid
        scope: cloud_controller.read,cloud_controller.write,cloud_controller.global_auditor,cloud_controller.admin,usage_service.audit,cloud_controller.user,actuator.read,cloud_controller.admin_read_only,openid
        authorized-grant-types: implicit
        show-on-homepage: true
        app-launch-url: "https://apps.(( .cloud_controller.system_domain.value ))"
        access-token-validity: (( apps_manager_access_token_lifetime.value ))
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))/**"
        app-icon: (( .push-apps-manager.square_logo.value || "iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAYAAACPZlfNAAAAAXNSR0IArs4c6QAABYtJREFUeAHtnVtsFFUYx7/d3ruWotUKVIkNaCw02YgJGBRTMd4CokUejD4QH4gxQcIDeHnBmPjkhSghUYLGe3ywPtAHNCo0QgkWwi2tXG2V1kIpLXTbLt1tS9dzlmzSJssZhv32zDk7/2km2znn7Pd9+/vt2Z2dmW0D9Obat4gCiwiLBQQSLflSViAQeN6Can1fYiJBFPQ9BcsAQBiEWUbAsnIxwyDMMgKWlYsZBmGWEbCsXMwwCLOMgGXlYoZBmGUELCsXMwzCLCNgWbmYYRBmGQHLysUMgzDLCFhWLmYYhFlGwLJyMcMgzDIClpWLGQZhlhGwrFzMMAizjIBl5WKGQZhlBCwrV1xbb96y59V1VFJQmLawQNrWa43x8XEaHo1fW+Oj1H8lSqf6eulEbw+dvNhLvcNDinvb0WWksAdm3UWhwiJ2gt2RAWo80UY7jrdSU8cZGrt6lT1HtgMaKSxbD7qqfDq99tAjyTUSG6FP9v1BH+3dTUPxeLZSssf17U5HeXEJbXr8aerY+A6tf7iOxFeu2OFmI6BvhaVgVoRCtHl5PTW8/AoV5xekmo299b2wlJn6+WFqWrOWKkpDqSYjbyFskpZFs++hL1e9NKnFvF+t3OmQOwzdkcgUmnnBABXm5Ys1j8qKisVadFPvS8tramn1goX09eEDU+KbsmGlsMbjbbT6x++UDOVORGXoFppXOYMerLqbVsyrpcWzqykYdH5R+fjZlcnd/8sjV5Q5vOh0rt6LqhhyJsQ3uC+ID8ry89aHYtf90W1bKLzlffr19EnH6HIP8oXasOM4LwbkrLB0MP+6cJ6e+eoz+vTP5nTdU9peDC+Ysm3Khq+ESehy5r3e2ECHu7uUDuqq59Id4iXVtMV3wqSACSHt3V2/KF3I97qayjuVY7zo9KUwCfq3M6coNjamZD6zrFzZ70Wnb4XFxseoK3JZyXzWtGnKfi86fStMwu6LRpXMZ5RBmBKQ7k75XqZa8gLmPZ/Nq0hFkLnvttJSZUT5Oc60xbfC5CGs6lsrlD56hgaV/V50+lbYkuo5VFygPp3SMwxhXjwp0+bcsGRp2vZU48TEBB09153aNObWlzNMHo1/6r4apYTmsx10MTqsHONFp5VH6zMBtWbhYtq6YpVjiJ/ajjmO8WKAL4QFxamWZffPT1678dicex05D4jTKj8cO+Q4zosBOSXs7bonktci5ovjgPIUye3ieo3wzKrk+TC5faPLGz83On6ovtFY3ONySth7Ty67qbPMk6Hu+edv+vzg/slNRv3uy52O6xk40HWW6r/94nrdRrTn1AzLhOju9tP03DfbKTo6mkmYrN/X98L6xQHgTb/vpG0t+5LnybJOPMMEvhXWOXCJvj9yiD7Yu4sGRkYyxKjv7r4RJi+Na+05Rwf/66SG1qO0v/NffZQZM+WUsI07d1BC/MTE144GYzHxJYcYDYq1vb/f8WQlI9OshsopYZubm7IKy4Tg2K03wYKLGiDMBSwThkKYCRZc1ABhLmCZMBTCTLDgogYIcwHLhKEQZoIFFzVAmAtYJgyFMBMsuKgBwlzAMmEohJlgwUUNEOYClglDIcwECy5qgDAXsEwYCmEmWHBRA4S5gGXCUAgzwYKLGow84yyvuyhR/GW19kt9Lh5ibg01UtjS7VtzizLjo8FLIiNMHaEgTAdlxhwQxghTRygI00GZMQeEMcLUEQrCdFBmzAFhjDB1hIIwHZQZc0AYI0wdoSBMB2XGHBDGCFNHKAjTQZkxB4QxwtQRCsJ0UGbMAWGMMHWEgjAdlBlzQBgjTB2hIEwHZcYcEMYIU0coCNNBmTEHhDHC1BEKwnRQZswBYYwwdYSCMB2UGXNAGCNMHaEgTAdlxhziUu1Ei8M/+WFMh1CZEUi0/A+j7hNSB5Wo2wAAAABJRU5ErkJggg==" ))
      (( usage_service_client_credentials.identity )):
        id: (( usage_service_client_credentials.identity ))
        secret: (( usage_service_client_credentials.password ))
        override: true
        authorities: "cloud_controller.read,uaa.resource,cloud_controller.admin"
        authorized-grant-types: client_credentials
      invitations:
        id: (( invitations_client_credentials.identity ))
        secret: (( invitations_client_credentials.password ))
        scope: uaa.none
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))/**"
        authorized-grant-types: client_credentials
        authorities: emails.write,cloud_controller.read,cloud_controller.write,uaa.resource,scim.invite,notifications.write,cloud_controller.admin
      cf:
        id: cf
        secret: ""
        override: true
        authorities: "uaa.none"
        authorized-grant-types: "password,refresh_token"
        scope: "cloud_controller.read,cloud_controller.write,cloud_controller.global_auditor,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write,cloud_controller.admin_read_only,network.admin,network.write"
        access-token-validity: (( cf_cli_access_token_lifetime.value ))
        refresh-token-validity: (( cf_cli_refresh_token_lifetime.value ))
      (( network_policy_server_client.identity )):
        id: (( network_policy_server_client.identity ))
        secret: (( network_policy_server_client.password ))
        authorities: "uaa.resource,cloud_controller.admin_read_only"
        authorized-grant-types: client_credentials
      (( autoscale_client_credentials.identity )):
        id: (( autoscale_client_credentials.identity ))
        secret: (( autoscale_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "uaa.resource,cloud_controller.write,cloud_controller.read,cloud_controller.admin,notifications.write,critical_notifications.write,emails.write,doppler.firehose"
        authorized-grant-types: "client_credentials,authorization_code,refresh_token"
        scope: "openid,cloud_controller.permissions,cloud_controller.read,cloud_controller.write,doppler.firehose"
        access-token-validity: 3600
        redirect-uri: "https://autoscale.(( .cloud_controller.system_domain.value ))/sessions/create"
      system_passwords:
        id: (( system_passwords_client_credentials.identity ))
        secret: (( system_passwords_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "uaa.admin,scim.read,scim.write,password.write"
        authorized-grant-types: "client_credentials"
      cc-service-dashboards:
        id: (( cc_service_dashboards_credentials.identity ))
        secret: (( cc_service_dashboards_credentials.password ))
        override: true
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: client_credentials
        scope: cloud_controller.write,openid,cloud_controller.read,cloud_controller_service_permissions.read
      doppler:
        id: (( doppler_client_credentials.identity ))
        secret: (( doppler_client_credentials.password ))
        authorities: uaa.resource
        authorized-grant-types: client_credentials
      gorouter:
        id: (( gorouter_client_credentials.identity ))
        secret: (( gorouter_client_credentials.password ))
        authorities: clients.read,clients.write,clients.admin,routing.routes.write,routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        scope: openid,cloud_controller_service_permissions.read
      notifications:
        id: notifications
        secret: (( .uaa.notifications_client_credentials.password ))
        authorities: cloud_controller.admin,scim.read,notifications.write,critical_notifications.write,emails.write
        authorized-grant-types: client_credentials
      notifications_template:
        id: (( .uaa.notifications_template_client_credentials.identity ))
        secret: (( .uaa.notifications_template_client_credentials.password ))
        scope: openid,clients.read,clients.write,clients.secret
        authorities: clients.read,clients.write,clients.secret,notification_templates.write,notification_templates.read,notifications.manage
        authorized-grant-types: client_credentials
      notifications_ui_client:
        id: notifications_ui_client
        secret: (( .uaa.notifications_ui_client_credentials.password ))
        scope: notification_preferences.read,notification_preferences.write,openid
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: notification_preferences.admin
        autoapprove: true
        override: true
        redirect-uri: "https://notifications-ui.(( .cloud_controller.system_domain.value ))/sessions/create"
      cloud_controller_username_lookup:
        id: (( .uaa.cloud_controller_username_lookup_credentials.identity ))
        secret: (( .uaa.cloud_controller_username_lookup_credentials.password ))
        authorized-grant-types: client_credentials
        authorities: scim.userids
      (( cc_routing_credentials.identity )):
        authorities: routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( cc_routing_credentials.password ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: "https://uaa.(( .cloud_controller.system_domain.value ))/login"
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: (( .uaa.ssh_proxy_client_credentials.password ))
      apps_metrics:
        id: (( apps_metrics_credentials.identity ))
        secret: (( apps_metrics_credentials.password ))
        override: true
        autoapprove: true
        authorized-grant-types: authorization_code,refresh_token,client_credentials,password
        redirect-uri: "https://metrics.(( .cloud_controller.system_domain.value )),https://metrics.(( .cloud_controller.system_domain.value ))/,https://metrics.(( .cloud_controller.system_domain.value ))/*"
        authorities: uaa.resource
        scope: cloud_controller.admin,cloud_controller.read,metrics.read
        access-token-validity: 900
        refresh-token-validity: 2628000
      apps_metrics_processing:
        id: (( apps_metrics_processing_credentials.identity ))
        secret: (( apps_metrics_processing_credentials.password ))
        override: true
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: oauth.login,doppler.firehose,cloud_controller.admin,uaa.resource
        scope: openid,oauth.approvals,doppler.firehose,cloud_controller.admin
        access-token-validity: 1209600
        redirect-uri: "https://metrics.(( .cloud_controller.system_domain.value ))"
      tcp_router:
        id: (( tcp_router_credentials.identity ))
        secret: (( tcp_router_credentials.password ))
        override: true
        authorized-grant-types: client_credentials,refresh_token
        authorities: routing.routes.read,routing.router_groups.read
        scope: routing.routes.read,routing.router_groups.read
        access-token-validity: 1209600
      tcp_emitter:
        id: (( tcp_emitter_credentials.identity ))
        secret: (( tcp_emitter_credentials.password ))
        override: true
        authorized-grant-types: client_credentials,refresh_token
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        scope: routing.routes.write,routing.routes.read,routing.router_groups.read
        access-token-validity: 1209600
      pivotal_account:
        id: (( pivotal_account_client_credentials.identity ))
        secret: (( pivotal_account_client_credentials.password ))
        scope: openid,password.write,oauth.approvals
        authorities: uaa.resource,idps.read,clients.read,scim.read,scim.create,scim.write,emails.write,oauth.login,notification_templates.write,notifications.manage,notification_templates.read,uaa.admin
        authorized-grant-types: client_credentials,authorization_code
        access-token-validity: 1209600
        refresh-token-validity: 1209600
        autoapprove: true
        override: true
        redirect-uri: https://account.(( .cloud_controller.system_domain.value ))/**
      concourse_atc:
        id: (( concourse_atc_client_credentials.identity ))
        secret: (( concourse_atc_client_credentials.password ))
        scope: cloud_controller.read
        authorities: cloud_controller.admin
        authorized-grant-types: "authorization_code,client_credentials,refresh_token"
        access-token-validity: 3600
        refresh-token-validity: 3600
        autoapprove: true
        override: true
        redirect-uri: "https://p-concourse.(( .cloud_controller.system_domain.value ))/auth/uaa/callback"
      push-notifications-dashboard:
        id: (( push_notifications_dashboard_client.identity ))
        secret: (( push_notifications_dashboard_client.password ))
        scope: cloud_controller.read,cloud_controller.write,openid
        authorities: scim.read
        authorized-grant-types: "refresh_token,client_credentials,authorization_code"
        access-token-validity: 3600
        autoapprove: true
        redirect-uri: "https://push.(( .cloud_controller.system_domain.value ))/auth/cloudfoundry/callback"
      push-api:
        id: (( push_api_client.identity ))
        secret: (( push_api_client.password ))
        scope: uaa.none
        authorities: uaa.resource
        authorized-grant-types: client_credentials
      solace_router:
        id: (( solace_router_client_credentials.identity ))
        secret: (( solace_router_client_credentials.password ))
        scope: "uaa.none"
        authorities: "routing.routes.read,routing.routes.write,routing.router_groups.read,cloud_controller.read,cloud_controller.write,cloud_controller.admin"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_broker:
        id: (( greenplum_broker_client_credentials.identity ))
        secret: (( greenplum_broker_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.read"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_router_admin:
        id: (( greenplum_router_admin_client_credentials.identity ))
        secret: (( greenplum_router_admin_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.admin,routing.router_groups.read"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_router:
        id: (( greenplum_router_client_credentials.identity ))
        secret: (( greenplum_router_client_credentials.password ))
        scope: "uaa.none"
        authorities: "routing.routes.write"
        authorized-grant-types: "refresh_token,client_credentials"
      cloudcache_broker:
        id: (( cloudcache_broker_client_credentials.identity ))
        secret: (( cloudcache_broker_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.admin"
        authorized-grant-types: "refresh_token,client_credentials"
      dedicated-mysql-notifications:
        id: (( dedicated_mysql_notifications_client_credentials.identity ))
        secret: (( dedicated_mysql_notifications_client_credentials.password ))
        scope: "uaa.none"
        authorities: "notifications.write"
        authorized-grant-types: "client_credentials"
    scim:
      groups:
        cloud_controller.admin_read_only: "Group that grants global read permissions for the Cloud Controller API"
      users:
      - name: (( admin_credentials.identity ))
        password: (( admin_credentials.password ))
        groups:
          - scim.write
          - scim.read
          - openid
          - cloud_controller.admin
          - dashboard.user
          - console.admin
          - console.support
          - doppler.firehose
          - notification_preferences.read
          - notification_preferences.write
          - notifications.manage
          - notification_templates.read
          - notification_templates.write
          - emails.write
          - notifications.write
          - zones.read
          - zones.write
          - routing.router_groups.read
          - routing.router_groups.write
          - network.admin
      - name: (( push_apps_manager_credentials.identity ))
        password: (( push_apps_manager_credentials.password ))
        groups:
          - cloud_controller.admin
      - name: (( run_smoke_tests_credentials.identity ))
        password: (( run_smoke_tests_credentials.password ))
        groups:
          - cloud_controller.admin
      - name: (( system_services_credentials.identity ))
        password: (( system_services_credentials.password ))
        groups:
          - cloud_controller.admin
      - name: (( system_verification_credentials.identity ))
        password: (( system_verification_credentials.password ))
        groups:
          - scim.write
          - scim.read
          - openid
          - cloud_controller.admin
          - dashboard.user
          - console.admin
          - console.support
      - name: (( logsearch_firehose_credentials.identity ))
        password: (( logsearch_firehose_credentials.password ))
        groups:
          - cloud_controller.admin
          - doppler.firehose
      - name: (( splunk_firehose_credentials.identity ))
        password: (( splunk_firehose_credentials.password ))
        groups:
          - cloud_controller.admin
          - doppler.firehose
  ccdb: (( .properties.system_database.selected_option.parsed_manifest(ccdb) ))
  uaadb: (( .properties.uaa_database.selected_option.parsed_manifest(db_config) ))
  metron_endpoint:
    shared_secret: (( .doppler.shared_secret_credentials.password ))
  loggregator:
    tls:
      ca_cert: (( $ops_manager.ca_certificate ))
      metron:
        cert: (( .doppler.metron_tls_cert.cert_pem ))
        key: (( .doppler.metron_tls_cert.private_key_pem ))
      statsd_injector:
        cert: (( .loggregator_trafficcontroller.statsdinjector_tls_cert.cert_pem ))
        key: (( .loggregator_trafficcontroller.statsdinjector_tls_cert.private_key_pem ))
  route_registrar:
    routes:
    - name: uaa
      port: 8080
      registration_interval: 4s
      uris:
      - "uaa.(( .cloud_controller.system_domain.value ))"
      - "*.uaa.(( .cloud_controller.system_domain.value ))"
      - "login.(( .cloud_controller.system_domain.value ))"
      - "*.login.(( .cloud_controller.system_domain.value ))"
      health_check:
        name: uaa-healthcheck
        script_path: /var/vcap/jobs/uaa/bin/health_check
  statsd_injector:
    deployment: cf
