---
name: uaa
release: uaa
manifest: |
  bpm:
    enabled: true
  uaadb: (( .properties.uaa_database.selected_option.parsed_manifest(db_config) ))
  encryption:
    active_key_label: default_key
    encryption_keys:
      - label: default_key
        passphrase: (((uaa-default-encryption-passphrase)))
  login:
    notifications:
      url: https://notifications.(( .cloud_controller.system_domain.value ))
    saml:
      activeKeyId: key1
      serviceProviderKey: ''
      serviceProviderKeyPassword: ''
      providers: (( .properties.uaa.selected_option.parsed_manifest(saml_provider) ))
      signRequest: (( .properties.uaa.saml.sign_auth_requests.value ))
      signatureAlgorithm: (( .properties.saml_signature_algorithm.value ))
      entityid: (( .properties.saml_entity_id_override.value || .properties.uaa.selected_option.parsed_manifest(default_saml_entity_id) ))
      serviceProviderCertificate: ''
      wantAssertionSigned: (( .properties.uaa.saml.require_signed_assertions.value ))
      keys:
        key1:
          key: (( .uaa.service_provider_key_credentials.private_key_pem ))
          passphrase: (( .uaa.service_provider_key_password.value || "" ))
          certificate: (( .uaa.service_provider_key_credentials.cert_pem ))
    logout:
      redirect:
        parameter:
          disable: false
          whitelist:
          - https://console.(( .cloud_controller.system_domain.value ))/
          - https://apps.(( .cloud_controller.system_domain.value ))/
    self_service_links_enabled: (( .properties.uaa.selected_option.parsed_manifest(self_service_links_enabled) ))
    branding:
      product_logo: (( .properties.push_apps_manager_logo.value || "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" ))
      square_logo: (( .properties.push_apps_manager_square_logo.value || "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAMAAADW3miqAAABSlBMVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIFBQUGBgYSEhIWFhYYGBgZGRkaGhofHx8gICAsLCwuLi4zMzM0NDQ2NjY3Nzc4ODg8PDw9PT0+Pj5AQEBERERFRUVHR0dLS0tQUFBUVFRVVVVWVlZXV1dYWFhZWVlbW1tcXFxdXV1gYGBmZmZpaWltbW1ubm5vb29zc3N1dXV2dnZ6enp+fn6AgICBgYGFhYWGhoaIiIiJiYmRkZGSkpKampqbm5ucnJyhoaGioqKkpKSmpqapqamqqqqzs7O0tLS1tbW3t7e7u7u/v7/CwsLFxcXIyMjLy8vQ0NDR0dHU1NTV1dXW1tbX19fd3d3f39/h4eHm5ubm5ubo6Ojo6Ojr6+vs7Ozu7u7x8fHx8fH09PT09PT29vb4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7+/v7///8WK6eIAAAAbHRSTlMEWVqWl5ioqKmprK2trq6vsLOztLW1tba3t7i4ubm6u7y9vb6+v7+/wMDBw8PFxcXGx8fJysrLzc3NztDR1NTU1tfX2NnZ3d7e3+Di4+Tl5+jp6+vr7O/w8fLz8/T19fb3+Pn6+/v8/P39/v549jpWAAAAAWJLR0RtuwYArQAAASRJREFUOMvt1EdTwmAYBODPmCyJgAZ7F7GjoiJiRVCKWIBYsaMIRmP2/189oM5wMZz0wp6fwzs776wQkoJfI0tCSHCMJBRnpAg0kCb6e6Rm0i4A/rwR8STOC4Hho4t0uzvsBXpCGhCYBgS8FmeBLpNkleTbO0ljh1moD1yHbr4CAjhhDsiwYLCyGLV5NXVAhljWxskzrLEICMBPy6ebHM0yD5S4hSFysMSJJE2rI8/t2uGXTMRoIMsc8MgNDJB9KSZvKnvcNO3OGlri8xODdah3jC88HmGZp18VqHdk0VWHunFLLuOejHz3FKYdBFI8BK65Ap/9oSPGqhv7rHh+ypyfAeCN6kD/qgYE54C2+ALg2Z1s/tO/INnZtDYyYi1CSLLjHH4CUQBZuqsfEWkAAAAASUVORK5CYII=" ))
      footer_legal_text: "Â© 2020 VMware, Inc. or its affiliates. All rights reserved."
    prompt:
      password:
        text: (( .uaa.customize_password_label.value ))
      username:
        text: (( .uaa.customize_username_label.value ))
  env:
    http_proxy: (( .uaa.http_proxy.value ))
    https_proxy: (( .uaa.https_proxy.value ))
    no_proxy: (( .uaa.no_proxy.value ))
  uaa:
    sslCertificate: (( .uaa.ssl_credentials.cert_pem ))
    ca_certs: (( .properties.uaa_database.selected_option.parsed_manifest(ca_certs) ))
    password:
      policy:
        requireUpperCaseCharacter: (( .properties.uaa.internal.password_min_uppercase.value ))
        requireLowerCaseCharacter: (( .properties.uaa.internal.password_min_lowercase.value ))
        requireDigit: (( .properties.uaa.internal.password_min_numeric.value ))
        requireSpecialCharacter: (( .properties.uaa.internal.password_min_special.value ))
        expirePasswordInMonths: (( .properties.uaa.internal.password_expires_after_months.value ))
        minLength: (( .properties.uaa.internal.password_min_length.value ))
    jwt:
      policy:
        active_key_id: key-1
        keys:
          key-1:
            signingKey: (( .uaa.jwt_signing_key_credentials.private_key_pem ))
    user:
      authorities:
      - openid
      - scim.me
      - cloud_controller.read
      - cloud_controller.write
      - cloud_controller_service_permissions.read
      - password.write
      - uaa.user
      - approvals.me
      - oauth.approvals
      - notification_preferences.read
      - notification_preferences.write
      - profile
      - roles
      - user_attributes
      - uaa.offline_token
      - actuator.read
      - cloud_controller.user
    url: https://uaa.(( .cloud_controller.system_domain.value ))
    catalina_opts: "-Xmx768m -XX:MaxPermSize=256m"
    ldap:
      sslCertificate: (( .properties.uaa.ldap.server_ssl_cert.value ))
      mailAttributeName: (( .properties.uaa.ldap.mail_attribute_name.value ))
      url: (( .properties.uaa.ldap.url.value ))
      searchBase: (( .properties.uaa.ldap.search_base.value ))
      searchFilter: (( .properties.uaa.ldap.search_filter.value ))
      enabled: (( .properties.uaa.ldap.url.value_present? ))
      emailDomain: (( .properties.uaa.ldap.email_domains.parsed_strings ))
      referral: (( .properties.uaa.ldap.ldap_referrals.value ))
      groups:
        profile_type: '(( .properties.uaa.ldap.group_search_base.value_present? ? "groups-map-to-scopes": "no-groups" ))'
        searchBase: (( .properties.uaa.ldap.group_search_base.value ))
        groupSearchFilter: (( .properties.uaa.ldap.group_search_filter.value ))
        maxSearchDepth: (( .properties.uaa.ldap.group_max_search_depth.value ))
      userDN: (( .properties.uaa.ldap.credentials.identity ))
      userPassword: (( .properties.uaa.ldap.credentials.password ))
    admin:
      client_secret: (( .uaa.admin_client_credentials.password ))
    log_level: INFO
    logging:
      format:
        timestamp: (( .properties.logging_timestamp_format.selected_option.parsed_manifest(rfc3339_or_deprecated) ))
    scim:
      groups:
        cloud_controller.admin_read_only: "Group that grants global read permissions for the Cloud Controller API"
        usage_service.audit: "View reports for the Usage Service"
      users:
      - name: (( .uaa.admin_credentials.identity ))
        password: (( .uaa.admin_credentials.password ))
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - dashboard.user
        - console.admin
        - console.support
        - doppler.firehose
        - healthwatch.read
        - healthwatch.edit
        - healthwatch.admin
        - notification_preferences.read
        - notification_preferences.write
        - notifications.manage
        - notification_templates.read
        - notification_templates.write
        - emails.write
        - notifications.write
        - zones.read
        - zones.write
        - routing.router_groups.read
        - routing.router_groups.write
        - network.write
        - network.admin
        - credhub.read
        - credhub.write
      - name: (( .uaa.push_apps_manager_credentials.identity ))
        password: (( .uaa.push_apps_manager_credentials.password ))
        groups:
        - cloud_controller.admin
      - name: (( .uaa.run_smoke_tests_credentials.identity ))
        password: (( .uaa.run_smoke_tests_credentials.password ))
        groups:
        - cloud_controller.admin
      - name: (( .uaa.system_services_credentials.identity ))
        password: (( .uaa.system_services_credentials.password ))
        groups:
        - cloud_controller.admin
      - name: (( .uaa.system_verification_credentials.identity ))
        password: (( .uaa.system_verification_credentials.password ))
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - dashboard.user
        - console.admin
        - console.support
      - name: (( .uaa.logsearch_firehose_credentials.identity ))
        password: (( .uaa.logsearch_firehose_credentials.password ))
        groups:
        - cloud_controller.admin
        - doppler.firehose
      - name: (( .uaa.splunk_firehose_credentials.identity ))
        password: (( .uaa.splunk_firehose_credentials.password ))
        groups:
        - cloud_controller.admin
        - doppler.firehose
      - name: (( .uaa.stackdriver_nozzle_credentials.identity ))
        password: (( .uaa.stackdriver_nozzle_credentials.password ))
        groups:
        - cloud_controller.admin_read_only
        - doppler.firehose
    proxy_ips_regex: (( .uaa.proxy_ips_regex.value ))
    proxy:
      servers: (( .uaa.proxy_servers.parsed_strings))
    sslPrivateKey: (( .uaa.ssl_credentials.private_key_pem ))
    issuer: (( .uaa.issuer_uri.value ))
    zones:
      internal:
        hostnames:
        - uaa.service.cf.internal
    authentication:
      enable_uri_encoding_compatibility_mode: (( .uaa.enable_uri_encoding_compatibility_mode.value ))
      policy:
        lockoutAfterFailures: (( .properties.uaa.internal.password_max_retry.value ))
    clients:
      opentsdb-firehose-nozzle:
        access-token-validity: 1209600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: (( .uaa.opentsdb_nozzle_credentials.password ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))"
      identity:
        id: (( .uaa.identity_client_credentials.identity ))
        secret: (( .uaa.identity_client_credentials.password ))
        scope: "cloud_controller.admin,cloud_controller.read,cloud_controller.write,openid,zones.*.*,zones.*.*.*,zones.read,zones.write,scim.read"
        resource_ids: none
        override: true
        authorized-grant-types: "authorization_code,client_credentials,refresh_token"
        autoapprove: true
        authorities: "scim.zones,zones.read,uaa.resource,zones.write,cloud_controller.admin,uaa.admin"
        redirect-uri: "https://p-identity.(( .cloud_controller.system_domain.value ))/dashboard/,https://p-identity.(( .cloud_controller.system_domain.value ))/dashboard/**"
      login:
        id: (( .uaa.login_client_credentials.identity ))
        secret: (( .uaa.login_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write"
        authorized-grant-types: "client_credentials,refresh_token"
        scope: "openid,oauth.approvals"
      apps_manager_js:
        name: "Apps Manager"
        override: true
        autoapprove:
          - cloud_controller.read
          - cloud_controller.write
          - cloud_controller.admin
          - cloud_controller.user
          - cloud_controller.admin_read_only
          - cloud_controller.global_auditor
          - doppler.firehose
          - actuator.read
          - openid
          - network.write
          - network.admin
          - usage_service.audit
        scope: cloud_controller.read,cloud_controller.write,cloud_controller.global_auditor,cloud_controller.admin,doppler.firehose,usage_service.audit,cloud_controller.user,actuator.read,cloud_controller.admin_read_only,openid,network.write,network.admin
        authorized-grant-types: implicit
        show-on-homepage: true
        app-launch-url: "https://apps.(( .cloud_controller.system_domain.value ))"
        access-token-validity: (( .uaa.apps_manager_access_token_lifetime.value ))
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))/**(( .properties.push_apps_manager_redirect_uris.value ? ',' : '' ))(( .properties.push_apps_manager_redirect_uris.value ))"
        app-icon: (( .properties.push_apps_manager_square_logo.value || "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" ))
      (( .uaa.push_usage_service_client_credentials.identity )):
        id: (( .uaa.push_usage_service_client_credentials.identity ))
        secret: (( .uaa.push_usage_service_client_credentials.password ))
        override: true
        authorities: "cloud_controller.admin"
        authorized-grant-types: client_credentials
      (( .uaa.usage_service_client_credentials.identity )):
        id: (( .uaa.usage_service_client_credentials.identity ))
        secret: (( .uaa.usage_service_client_credentials.password ))
        override: true
        authorities: "cloud_controller.read,uaa.resource,cloud_controller.admin"
        authorized-grant-types: client_credentials
      invitations:
        id: (( .uaa.invitations_client_credentials.identity ))
        secret: (( .uaa.invitations_client_credentials.password ))
        scope: uaa.none
        redirect-uri: "https://apps.(( .cloud_controller.system_domain.value ))/**"
        authorized-grant-types: client_credentials
        authorities: emails.write,cloud_controller.read,cloud_controller.write,uaa.resource,scim.invite,notifications.write,cloud_controller.admin
      cf:
        id: cf
        secret: ""
        override: true
        authorities: "uaa.none"
        authorized-grant-types: "password,refresh_token"
        scope: "cloud_controller.read,cloud_controller.write,cloud_controller.global_auditor,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write,cloud_controller.admin_read_only,network.admin,network.write,usage_service.audit"
        access-token-validity: (( .uaa.cf_cli_access_token_lifetime.value ))
        refresh-token-validity: (( .uaa.cf_cli_refresh_token_lifetime.value ))
      (( .uaa.network_policy_server_client.identity )):
        id: (( .uaa.network_policy_server_client.identity ))
        secret: (( .uaa.network_policy_server_client.password ))
        authorities: "uaa.resource,cloud_controller.admin_read_only"
        authorized-grant-types: client_credentials
      (( .uaa.autoscale_client_credentials.identity )):
        id: (( .uaa.autoscale_client_credentials.identity ))
        secret: (( .uaa.autoscale_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "uaa.resource,cloud_controller.write,cloud_controller.read,cloud_controller.admin,notifications.write,critical_notifications.write,emails.write,doppler.firehose"
        authorized-grant-types: "client_credentials,authorization_code,refresh_token"
        scope: "openid,cloud_controller.read,cloud_controller.write"
        access-token-validity: 3600
        redirect-uri: "https://autoscale.(( .cloud_controller.system_domain.value ))/sessions/create"
      (( .uaa.autoscale_api_client_credentials.identity )):
        id: (( .uaa.autoscale_api_client_credentials.identity ))
        secret: (( .uaa.autoscale_api_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "uaa.resource,cloud_controller.admin_read_only"
        authorized-grant-types: "client_credentials"
        access-token-validity: 3600
      (( .uaa.metric_registrar_credentials.identity )):
        id: (( .uaa.metric_registrar_credentials.identity ))
        secret: (( .uaa.metric_registrar_credentials.password ))
        override: true
        autoapprove: true
        authorities: cloud_controller.admin_read_only
        authorized-grant-types: client_credentials
      (( .uaa.metric_registrar_smoke_test_credentials.identity )):
        id: (( .uaa.metric_registrar_smoke_test_credentials.identity ))
        secret: (( .uaa.metric_registrar_smoke_test_credentials.password ))
        override: true
        autoapprove: true
        authorities: cloud_controller.admin
        authorized-grant-types: client_credentials
      system_passwords:
        id: (( .uaa.system_passwords_client_credentials.identity ))
        secret: (( .uaa.system_passwords_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: "uaa.admin,scim.read,scim.write,password.write"
        authorized-grant-types: "client_credentials"
      cc-service-dashboards:
        id: (( .uaa.cc_service_dashboards_credentials.identity ))
        secret: (( .uaa.cc_service_dashboards_credentials.password ))
        override: true
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: client_credentials
        scope: cloud_controller.write,openid,cloud_controller.read,cloud_controller_service_permissions.read
      cc_service_key_client:
        id: (( .uaa.cc_service_key_credentials.identity ))
        secret: (( .uaa.cc_service_key_credentials.password ))
        override: true
        authorities: credhub.read,credhub.write
        authorized-grant-types: client_credentials
      services_credhub_client:
        id: (( .uaa.services_credhub_credentials.identity ))
        secret: (( .uaa.services_credhub_credentials.password ))
        override: true
        authorities: credhub.read,credhub.write
        authorized-grant-types: client_credentials
      doppler:
        id: (( .uaa.doppler_client_credentials.identity ))
        secret: (( .uaa.doppler_client_credentials.password ))
        authorities: uaa.resource
        authorized-grant-types: client_credentials
      noisy_neighbor_nozzle:
        id: (( .uaa.noisy_neighbor_client_credentials.identity ))
        secret: (( .uaa.noisy_neighbor_client_credentials.password ))
        authorities: doppler.firehose,uaa.resource,cloud_controller.admin_read_only
        authorized-grant-types: client_credentials
        override: true
        scope: doppler.firehose
      gorouter:
        id: (( .uaa.gorouter_client_credentials.identity ))
        secret: (( .uaa.gorouter_client_credentials.password ))
        authorities: clients.read,clients.write,clients.admin,routing.routes.write,routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        scope: openid,cloud_controller_service_permissions.read
      notifications:
        id: notifications
        secret: (( .uaa.notifications_client_credentials.password ))
        authorities: cloud_controller.admin,scim.read,notifications.write,critical_notifications.write,emails.write
        authorized-grant-types: client_credentials
      notifications_template:
        id: (( .uaa.notifications_template_client_credentials.identity ))
        secret: (( .uaa.notifications_template_client_credentials.password ))
        scope: openid,clients.read,clients.write,clients.secret
        authorities: clients.read,clients.write,clients.secret,notification_templates.write,notification_templates.read,notifications.manage
        authorized-grant-types: client_credentials
      notifications_ui_client:
        id: notifications_ui_client
        secret: (( .uaa.notifications_ui_client_credentials.password ))
        scope: notification_preferences.read,notification_preferences.write,openid
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: notification_preferences.admin
        autoapprove: true
        override: true
        redirect-uri: "https://notifications-ui.(( .cloud_controller.system_domain.value ))/sessions/create"
      cloud_controller_username_lookup:
        id: (( .uaa.cloud_controller_username_lookup_credentials.identity ))
        secret: (( .uaa.cloud_controller_username_lookup_credentials.password ))
        authorized-grant-types: client_credentials
        authorities: scim.userids
      (( .uaa.cc_routing_credentials.identity )):
        authorities: routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( .uaa.cc_routing_credentials.password ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: "https://uaa.(( .cloud_controller.system_domain.value ))/login"
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: (( .uaa.ssh_proxy_client_credentials.password ))
      apps_metrics:
        id: (( .uaa.apps_metrics_credentials.identity ))
        secret: (( .uaa.apps_metrics_credentials.password ))
        override: true
        autoapprove: true
        authorized-grant-types: authorization_code,refresh_token,client_credentials,password
        redirect-uri: "https://metrics.(( .cloud_controller.system_domain.value ))/**,https://metrics-previous.(( .cloud_controller.system_domain.value ))/**"
        authorities: uaa.resource
        scope: cloud_controller.admin,cloud_controller.read,metrics.read,cloud_controller.admin_read_only
        access-token-validity: 900
        refresh-token-validity: 2628000
      apps_metrics_processing:
        id: (( .uaa.apps_metrics_processing_credentials.identity ))
        secret: (( .uaa.apps_metrics_processing_credentials.password ))
        override: true
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: oauth.login,doppler.firehose,cloud_controller.admin,uaa.resource
        scope: openid,oauth.approvals,doppler.firehose,cloud_controller.admin,cloud_controller.admin_read_only
        access-token-validity: 1209600
        redirect-uri: "https://metrics.(( .cloud_controller.system_domain.value )),https://metrics-previous.(( .cloud_controller.system_domain.value ))"
      catalyst:
        id: (( .uaa.catalyst_credentials.identity ))
        secret: (( .uaa.catalyst_credentials.password ))
        override: true
        authorized-grant-types: authorization_code
        autoapprove: true
        scope: uaa.user,cloud_controller.read,cloud_controller.admin_read_only,cloud_controller.admin,cloud_controller.global_auditor,logs.admin,doppler.firehose
        redirect-uri: "https://metrics.(( .cloud_controller.system_domain.value ))/**,https://appwatch.(( .cloud_controller.system_domain.value ))/**,https://appmetrics.(( .cloud_controller.system_domain.value ))/**,https://applogs.(( .cloud_controller.system_domain.value ))/**"
      healthwatch_ui:
        id: "(( .uaa.healthwatch_ui_credentials.identity ))"
        secret: "(( .uaa.healthwatch_ui_credentials.password ))"
        override: true
        authorized-grant-types: authorization_code,password,implicit,refresh_token
        authorities: uaa.resource
        scope: healthwatch.read,healthwatch.admin
        access-token-validity: 900
        redirect-uri: "https://healthwatch.(( .cloud_controller.system_domain.value ))"
        autoapprove: true
        refresh-token-validity: 2628000
      healthwatch_api_admin:
        id: "(( .uaa.healthwatch_api_admin_credentials.identity ))"
        secret: "(( .uaa.healthwatch_api_admin_credentials.password ))"
        override: true
        scope: healthwatch.admin
        authorized-grant-types: client_credentials,refresh_token
        authorities: healthwatch.admin
        access-token-validity: 3600
        autoapprove: true
      healthwatch_alerts:
        id: "(( .uaa.healthwatch_alerts_credentials.identity ))"
        secret: "(( .uaa.healthwatch_alerts_credentials.password ))"
        override: true
        scope: uaa.none
        authorized-grant-types: client_credentials
        authorities: notifications.write
        access-token-validity: 3600
        autoapprove: true
      healthwatch_firehose:
        id: "(( .uaa.healthwatch_firehose_credentials.identity ))"
        secret: "(( .uaa.healthwatch_firehose_credentials.password ))"
        authorized-grant-types: client_credentials,refresh_token
        authorities: oauth.login,doppler.firehose,cloud_controller.read,uaa.resource,cloud_controller.admin
        scope: openid,oauth.approvals,doppler.firehose,cloud_controller.admin
        access-token-validity: 3600
      tcp_router:
        id: (( .uaa.tcp_router_credentials.identity ))
        secret: (( .uaa.tcp_router_credentials.password ))
        override: true
        authorized-grant-types: client_credentials,refresh_token
        authorities: routing.routes.read,routing.router_groups.read
        scope: routing.routes.read,routing.router_groups.read
        access-token-validity: 1209600
      tcp_emitter:
        id: (( .uaa.tcp_emitter_credentials.identity ))
        secret: (( .uaa.tcp_emitter_credentials.password ))
        override: true
        authorized-grant-types: client_credentials,refresh_token
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        scope: routing.routes.write,routing.routes.read,routing.router_groups.read
        access-token-validity: 1209600
      concourse_atc:
        id: (( .uaa.concourse_atc_client_credentials.identity ))
        secret: (( .uaa.concourse_atc_client_credentials.password ))
        scope: cloud_controller.read
        authorities: cloud_controller.admin
        authorized-grant-types: "authorization_code,client_credentials,refresh_token"
        access-token-validity: 3600
        refresh-token-validity: 3600
        autoapprove: true
        override: true
        redirect-uri: "https://p-concourse.(( .cloud_controller.system_domain.value ))/auth/uaa/callback"
      push-notifications-dashboard:
        id: (( .uaa.push_notifications_dashboard_client.identity ))
        secret: (( .uaa.push_notifications_dashboard_client.password ))
        scope: cloud_controller.read,cloud_controller.write,openid
        authorities: scim.read
        authorized-grant-types: "refresh_token,client_credentials,authorization_code"
        access-token-validity: 3600
        autoapprove: true
        redirect-uri: "https://push.(( .cloud_controller.system_domain.value ))/auth/cloudfoundry/callback"
      push-api:
        id: (( .uaa.push_api_client.identity ))
        secret: (( .uaa.push_api_client.password ))
        scope: uaa.none
        authorities: uaa.resource
        authorized-grant-types: client_credentials
      solace_router:
        id: (( .uaa.solace_router_client_credentials.identity ))
        secret: (( .uaa.solace_router_client_credentials.password ))
        scope: "uaa.none"
        authorities: "routing.routes.read,routing.routes.write,routing.router_groups.read,cloud_controller.read,cloud_controller.write,cloud_controller.admin"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_broker:
        id: (( .uaa.greenplum_broker_client_credentials.identity ))
        secret: (( .uaa.greenplum_broker_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.read"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_router_admin:
        id: (( .uaa.greenplum_router_admin_client_credentials.identity ))
        secret: (( .uaa.greenplum_router_admin_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.admin,routing.router_groups.read"
        authorized-grant-types: "refresh_token,client_credentials"
      greenplum_router:
        id: (( .uaa.greenplum_router_client_credentials.identity ))
        secret: (( .uaa.greenplum_router_client_credentials.password ))
        scope: "uaa.none"
        authorities: "routing.routes.write"
        authorized-grant-types: "refresh_token,client_credentials"
      cloudcache_broker:
        id: (( .uaa.cloudcache_broker_client_credentials.identity ))
        secret: (( .uaa.cloudcache_broker_client_credentials.password ))
        scope: "uaa.none"
        authorities: "cloud_controller.admin,zones.write,zones.read,zones.pcc.admin"
        authorized-grant-types: "refresh_token,client_credentials"
      dedicated-mysql-notifications:
        id: (( .uaa.dedicated_mysql_notifications_client_credentials.identity ))
        secret: (( .uaa.dedicated_mysql_notifications_client_credentials.password ))
        scope: "uaa.none"
        authorities: "notifications.write"
        authorized-grant-types: "client_credentials"
      container-networking-interface:
        id: (( .uaa.container_networking_interface_client_credentials.identity ))
        secret: (( .uaa.container_networking_interface_client_credentials.password ))
        authorities: uaa.resource,cloud_controller.global_auditor
        authorized-grant-types: client_credentials
      credhub_cli:
        id: credhub_cli
        secret: ""
        scope: credhub.read,credhub.write
        authorities: uaa.resource
        authorized-grant-types: password,refresh_token
        access-token-validity: 120
        override: true
        refresh-token-validity: 3600
      credhub_admin_client:
        id: (( .uaa.credhub_admin_client_client_credentials.identity ))
        secret: (( .uaa.credhub_admin_client_client_credentials.password ))
        authorities: credhub.read,credhub.write
        authorized-grant-types: client_credentials
      tile_installer:
        id: (( .uaa.tile_installer_client_credentials.identity ))
        secret: (( .uaa.tile_installer_client_credentials.password ))
        override: true
        autoapprove: true
        authorities: cloud_controller.admin,clients.admin,credhub.read,credhub.write
        authorized-grant-types: client_credentials
        access-token-validity: 3600
      (( .uaa.nfsbroker_credhub_client_credentials.identity )):
        id: (( .uaa.nfsbroker_credhub_client_credentials.identity ))
        authorities: credhub.read,credhub.write
        authorized-grant-types: client_credentials
        secret: (( .uaa.nfsbroker_credhub_client_credentials.password ))
      (( .uaa.smbbroker_client_credentials.identity )):
        id: (( .uaa.smbbroker_client_credentials.identity ))
        authorities: cloud_controller.admin
        authorized-grant-types: client_credentials
        secret: (( .uaa.smbbroker_client_credentials.password ))
      (( .uaa.smbbroker_credhub_client_credentials.identity )):
        id: (( .uaa.smbbroker_credhub_client_credentials.identity ))
        authorities: credhub.read,credhub.write
        authorized-grant-types: client_credentials
        secret: (( .uaa.smbbroker_credhub_client_credentials.password ))
      (( .uaa.telemetry_usage_service_client_credentials.identity )):
        id: (( .uaa.telemetry_usage_service_client_credentials.identity ))
        secret: (( .uaa.telemetry_usage_service_client_credentials.password ))
        authorities: "usage_service.audit"
        authorized-grant-types: "client_credentials"
    servlet:
      session-cookie:
        max-age: (( .properties.uaa_session_cookie_max_age.value ))
      idle-timeout: (( .properties.uaa_session_idle_timeout.value ))
